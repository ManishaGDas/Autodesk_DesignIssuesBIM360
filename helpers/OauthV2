const http = require('http');
const axios = require('axios').default;
const config = require('./../config');  
const fs = require('fs');
const path = require('path');
const { ok } = require('assert');
var stream = require('stream');
const fetch = require('node-fetch');

const base_url = 'https://developer.api.autodesk.com';

const ReadTokenScopes = ['data:read', 'account:read'];
const WriteTokenScopes = ['data:create', 'data:write', 'data:read'];
const PageSize = 64;


//AuthV2

async function getUserProfile(token){
    const config = {
        headers: {
            'Authorization': 'Bearer ' + token
        }
    };
    const resp = await axios.get('https://api.userprofile.autodesk.com/userinfo', config);
    return resp.data;
}

//https://developer.api.autodesk.com/authentication/v2/token
async function  getToken(code, redirectUri){

    const basicAuth = Buffer.from(`${config.client_id}:${config.client_secret}`).toString("base64")

    const opts = {
       headers : {
            'Authorization': 'Basic ' + basicAuth,
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json'
        }
    };

   
    const params = {
      
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': redirectUri
    };
    const url = `${base_url}/authentication/v2/token`;

    const response = await axios.post(url,params, opts );
    return resp.data;
}

async function post(endpoint, headers, body) {
    const options = { method: 'POST', headers: headers || {}, body: body||null };
    const response = await fetch(endpoint, options);
    if (response.status == 200 || response.status == 201 ) {
        const json = await response.json();
        return json;
    } else if (response.status == 204 ||response.status == 202 ){  //for some endpoints that delete entities
        return true
    }
    else {
        const message = await response.text();
        throw new Error(response.status+ ' ' + response.statusText + ' ' + message);
    }
}

module.exports = {
    getUserProfile,
    getToken
    

};